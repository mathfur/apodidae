#!/usr/bin/env ruby

require 'getoptlong'
require 'fileutils'
require './lib/apodidae'

usage = <<EOS
Usage: apodidae [options]
    -h, --help                  show help.
    -v, --version               show version.
    -b, --barb-dir              specify barb dir.
    -r, --rachis-dir            specify rachis dir.
    -c, --connection-file       specify connection file name.
    -o, --output-file           specify generated file name.
    -l, --list-barbs            specify barb dir then list all barbs.
    -n, --dont-use-apodidae-yml specify if you do not want to use .apodidae.yml
    -p, --use-clipboard         the clipboard string is used by connection data.
EOS
output_dir = "#{File.dirname(__FILE__)}/.."

opts = GetoptLong.new(
  ['--list-barbs', '-l', GetoptLong::REQUIRED_ARGUMENT],
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--version', '-v', GetoptLong::NO_ARGUMENT],
  ['--watch', '-w', GetoptLong::NO_ARGUMENT],
  ['--barb-dir', '-b', GetoptLong::OPTIONAL_ARGUMENT],
  ['--rachis-dir', '-r', GetoptLong::OPTIONAL_ARGUMENT],
  ['--connection-file', '-c', GetoptLong::OPTIONAL_ARGUMENT],
  ['--output-file', '-o', GetoptLong::OPTIONAL_ARGUMENT],
  ['--use-clipboard', '-p', GetoptLong::NO_ARGUMENT],
  ['--dont-use-apodidae-yml', '-n',  GetoptLong::NO_ARGUMENT]
)

config_file = "#{ENV['HOME']}/.apodidae.yml"
manager = Apodidae::Manager.new
dealing_label = nil
output_pairs = {}

if !ARGV.include?('--dont-use-apodidae-yml') and !ARGV.include?('-n')
  if File.exist?(config_file)
    manager.load_config(YAML.load_file(config_file))
  end
end

begin
  opts.each do |opt, arg|
    case opt
    when '--help'; puts usage; exit
    when '--version'; puts Apodidae::VERSION; exit
    when '--watch'; puts 'before implementation.'; exit
    when '--barb-dir'
      manager.add_barb_from_file(arg)
    when '--rachis-dir'
      manager.add_rachis_from_file(arg)
    when '--connection-file'
      manager.set_connection_from_file(arg)
    when '--use-clipboard'
      manager.use_clipboard
    when '--output-file'
      arg.split(',').map do |pair|
        raise "--output-file values splited by ',' must be all include ':'." unless pair.include?(':')
        pair.split(':')
      end.each do |dealing_label, output_target|
        output_pairs[Apodidae::Edge.new(dealing_label)] = output_target
      end
    when '--list-barbs'
      puts manager.list_barbs_string(arg)
      exit
    else
    end
  end
rescue RuntimeError => e
  puts e.message
  puts e.backtrace
  exit
end

manager.edge_target_pairs = output_pairs
manager.generate
manager.write
